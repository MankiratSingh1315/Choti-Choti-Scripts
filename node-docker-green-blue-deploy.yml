name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_CLIENT_URL: ${{ secrets.NEXT_PUBLIC_CLIENT_URL }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Build Next.js app
      run: npm run build

    - name: Install SSH client
      run: sudo apt-get update && sudo apt-get install -y ssh

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no user@example.in << 'EOF'
          set -e

          # Variables
          CURRENT_CONTAINER=`docker ps --filter "name=example" --format "{{.Names}}"`
          echo $CURRENT_CONTAINER
          if [ "$CURRENT_CONTAINER" = "example-blue" ]; then
            NEW_CONTAINER="example-green"
            OLD_CONTAINER="example-blue"
          else
            NEW_CONTAINER="example-blue"
            OLD_CONTAINER="example-green"
          fi

          # Pull latest code
          cd storoo
          git fetch --all
          git reset --hard origin/main

          # Build and run the new container
          docker build --no-cache -t storoo .
          docker stop $OLD_CONTAINER

          docker run -d --name $NEW_CONTAINER -p 3000:3000 example

          sleep 10

          if [ $? -eq 0 ]; then
            docker rm $OLD_CONTAINER
          else
            docker start $OLD_CONTAINER
          fi
          docker update --restart=always $NEW_CONTAINER

          # Clean up old images
          docker image prune -f
